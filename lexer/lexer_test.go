// SPDX-License-Identifier: Apache-2.0
package lexer

import (
	"log"
	"os"
	"testing"

	"kanso-lang/token"
)

func TestNextTokenErc20(t *testing.T) {
	erc20File, err := os.ReadFile("../examples/ERC20.kal")
	if err != nil {
		log.Fatal(err)
	}
	input := string(erc20File)

	tests := []struct {
		expectedType    token.TokenType
		expectedLiteral string
	}{
		{token.COMMENT, "SPDX-License-Identifier: Apache-2.0"},
		{token.LATTR, "#["},
		{token.IDENT, "contract"},
		{token.RATTR, "]"},
		{token.MODULE, "module"},
		{token.IDENT, "ERC20"},
		{token.LBRACE, "{"},
		{token.USE, "use"},
		{token.IDENT, "Evm"},
		{token.NAMESPACE, "::"},
		{token.LBRACE, "{"},
		{token.IDENT, "sender"},
		{token.COMMA, ","},
		{token.IDENT, "self"},
		{token.COMMA, ","},
		{token.IDENT, "sign"},
		{token.COMMA, ","},
		{token.IDENT, "emit"},
		{token.RBRACE, "}"},
		{token.SEMICOLON, ";"},
		{token.USE, "use"},
		{token.IDENT, "Table"},
		{token.NAMESPACE, "::"},
		{token.LBRACE, "{"},
		{token.IDENT, "Self"},
		{token.COMMA, ","},
		{token.IDENT, "Table"},
		{token.RBRACE, "}"},
		{token.SEMICOLON, ";"},
		{token.USE, "use"},
		{token.IDENT, "U256"},
		{token.NAMESPACE, "::"},
		{token.LBRACE, "{"},
		{token.IDENT, "Self"},
		{token.COMMA, ","},
		{token.IDENT, "U256"},
		{token.RBRACE, "}"},
		{token.SEMICOLON, ";"},
		{token.USE, "use"},
		{token.IDENT, "std"},
		{token.NAMESPACE, "::"},
		{token.IDENT, "ascii"},
		{token.NAMESPACE, "::"},
		{token.LBRACE, "{"},
		{token.IDENT, "String"},
		{token.RBRACE, "}"},
		{token.SEMICOLON, ";"},
		{token.USE, "use"},
		{token.IDENT, "std"},
		{token.NAMESPACE, "::"},
		{token.IDENT, "errors"},
		{token.SEMICOLON, ";"},
		{token.LATTR, "#["},
		{token.IDENT, "event"},
		{token.RATTR, "]"},
		{token.STRUCT, "struct"},
		{token.IDENT, "Transfer"},
		{token.LBRACE, "{"},
		{token.IDENT, "from"},
		{token.COLON, ":"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "to"},
		{token.COLON, ":"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "value"},
		{token.COLON, ":"},
		{token.IDENT, "U256"},
		{token.COMMA, ","},
		{token.RBRACE, "}"},
		{token.LATTR, "#["},
		{token.IDENT, "event"},
		{token.RATTR, "]"},
		{token.STRUCT, "struct"},
		{token.IDENT, "Approval"},
		{token.LBRACE, "{"},
		{token.IDENT, "owner"},
		{token.COLON, ":"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "spender"},
		{token.COLON, ":"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "value"},
		{token.COLON, ":"},
		{token.IDENT, "U256"},
		{token.COMMA, ","},
		{token.RBRACE, "}"},
		{token.LATTR, "#["},
		{token.IDENT, "storage"},
		{token.RATTR, "]"},
		{token.DOC_COMMENT, "Represents the state of this contract. This is located at `borrow_global<State>(self())`."},
		{token.STRUCT, "struct"},
		{token.IDENT, "State"},
		{token.HAS, "has"},
		{token.IDENT, "key"},
		{token.LBRACE, "{"},
		{token.IDENT, "balances"},
		{token.COLON, ":"},
		{token.IDENT, "Table"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "U256"},
		{token.GT, ">"},
		{token.COMMA, ","},
		{token.IDENT, "allowances"},
		{token.COLON, ":"},
		{token.IDENT, "Table"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "Table"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "U256"},
		{token.GT, ">"},
		{token.GT, ">"},
		{token.COMMA, ","},
		{token.IDENT, "total_supply"},
		{token.COLON, ":"},
		{token.IDENT, "U256"},
		{token.COMMA, ","},
		{token.IDENT, "name"},
		{token.COLON, ":"},
		{token.IDENT, "String"},
		{token.COMMA, ","},
		{token.IDENT, "symbol"},
		{token.COLON, ":"},
		{token.IDENT, "String"},
		{token.COMMA, ","},
		{token.IDENT, "decimals"},
		{token.COLON, ":"},
		{token.IDENT, "u8"},
		{token.COMMA, ","},
		{token.RBRACE, "}"},
		{token.LATTR, "#["},
		{token.IDENT, "create"},
		{token.RATTR, "]"},
		{token.DOC_COMMENT, "Constructor of this contract."},
		{token.PUBLIC, "public"},
		{token.FUNCTION, "fun"},
		{token.IDENT, "create"},
		{token.LPAREN, "("},
		{token.IDENT, "name"},
		{token.COLON, ":"},
		{token.IDENT, "String"},
		{token.COMMA, ","},
		{token.IDENT, "symbol"},
		{token.COLON, ":"},
		{token.IDENT, "String"},
		{token.COMMA, ","},
		{token.IDENT, "initial_supply"},
		{token.COLON, ":"},
		{token.IDENT, "U256"},
		{token.COMMA, ","},
		{token.IDENT, "decimals"},
		{token.COLON, ":"},
		{token.IDENT, "u8"},
		{token.RPAREN, ")"},
		{token.ACQUIRES, "acquires"},
		{token.IDENT, "State"},
		{token.LBRACE, "{"},
		{token.COMMENT, "Initial state of contract"},
		{token.IDENT, "move_to"},
		{token.LT, "<"},
		{token.IDENT, "State"},
		{token.GT, ">"},
		{token.LPAREN, "("},
		{token.AMPERSAND, "&"},
		{token.IDENT, "sign"},
		{token.LPAREN, "("},
		{token.IDENT, "self"},
		{token.LPAREN, "("},
		{token.RPAREN, ")"},
		{token.RPAREN, ")"},
		{token.COMMA, ","},
		{token.IDENT, "State"},
		{token.LBRACE, "{"},
		{token.IDENT, "total_supply"},
		{token.COLON, ":"},
		{token.IDENT, "U256"},
		{token.NAMESPACE, "::"},
		{token.IDENT, "zero"},
		{token.LPAREN, "("},
		{token.RPAREN, ")"},
		{token.COMMA, ","},
		{token.IDENT, "balances"},
		{token.COLON, ":"},
		{token.IDENT, "Table"},
		{token.NAMESPACE, "::"},
		{token.IDENT, "empty"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "U256"},
		{token.GT, ">"},
		{token.LPAREN, "("},
		{token.RPAREN, ")"},
		{token.COMMA, ","},
		{token.IDENT, "allowances"},
		{token.COLON, ":"},
		{token.IDENT, "Table"},
		{token.NAMESPACE, "::"},
		{token.IDENT, "empty"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "Table"},
		{token.LT, "<"},
		{token.IDENT, "address"},
		{token.COMMA, ","},
		{token.IDENT, "U256"},
		{token.GT, ">"},
		{token.GT, ">"},
		{token.LPAREN, "("},
		{token.RPAREN, ")"},
		{token.COMMA, ","},
		{token.IDENT, "name"},
		{token.COMMA, ","},
		{token.IDENT, "symbol"},
		{token.COMMA, ","},
		{token.IDENT, "decimals"},
		{token.COMMA, ","},
		{token.RBRACE, "}"},
		{token.RPAREN, ")"},
		{token.SEMICOLON, ";"},
		{token.COMMENT, "Minting the initial supply"},
		{token.IDENT, "mint"},
		{token.LPAREN, "("},
		{token.IDENT, "sender"},
		{token.LPAREN, "("},
		{token.RPAREN, ")"},
		{token.COMMA, ","},
		{token.IDENT, "initial_supply"},
		{token.RPAREN, ")"},
		{token.SEMICOLON, ";"},
		{token.RBRACE, "}"},
	}

	l := New(input)

	for i, tt := range tests {
		tok := l.NextToken()

		if tok.Type != tt.expectedType {
			t.Fatalf("tests[%d] - wrong token type. expected=%q, got=%q", i, tt.expectedType, tok.Type)
		}

		if tok.Literal != tt.expectedLiteral {
			t.Fatalf("tests[%d] - wrong literal value. expected=%q, got=%q", i, tt.expectedLiteral, tok.Literal)
		}
	}
}
